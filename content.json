{"meta":{"title":"岩窟的blog","subtitle":"琥珀","description":"","author":"yanku","url":"http://yoursite.com","root":"/"},"pages":[{"title":"tags","date":"2020-04-13T15:20:18.000Z","updated":"2020-04-13T15:24:31.521Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-04-13T15:21:41.000Z","updated":"2020-04-13T15:22:09.476Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2020-04-13T15:22:23.000Z","updated":"2020-04-13T15:22:23.477Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"逆向","slug":"nixiang","date":"2020-05-09T03:33:41.000Z","updated":"2020-05-09T03:37:54.657Z","comments":true,"path":"2020/05/09/nixiang/","link":"","permalink":"http://yoursite.com/2020/05/09/nixiang/","excerpt":"","text":"\\6. 根据crackme，overflow，overflow2，overflow3的二进制程序，复现授课中的利用过程 1) Crackme**：** 关键为 jz short * YQCUgO.png 修改指令 保存修改 正确密码无法得到正常结果 YQC228.png 2) OF1**：** 开始调试 YQCRxS.png 7个q没有改变局部变量的值 8个q执行前 执行后发生了栈溢出 3) OF2**：** 记录函数正确输出地址 任意填充8字符覆盖password，4字符覆盖authenticated，4字符覆盖上一栈帧的ebp,填入4个字符返回地址，判断地址是大端序还是小端序读入。 攻击成功 4) OF3**：** 在xp下运行ollydbug，记录ebp,返回地址等 获取mssageboxa地址 获取jmp esp和exit地址 Password代码： 结果成功","categories":[{"name":"逆向","slug":"逆向","permalink":"http://yoursite.com/categories/%E9%80%86%E5%90%91/"}],"tags":[{"name":"逆向","slug":"逆向","permalink":"http://yoursite.com/tags/%E9%80%86%E5%90%91/"}]},{"title":"dvwa","slug":"dvwa","date":"2020-05-09T03:33:29.000Z","updated":"2020-05-09T04:22:51.036Z","comments":true,"path":"2020/05/09/dvwa/","link":"","permalink":"http://yoursite.com/2020/05/09/dvwa/","excerpt":"","text":"1) Brute Force Low：首先将火狐浏览器设置代理 然后输入用户名admin密码a 再用brutesuite截获报文 用CTRL+I将报文发送给Intruder,然后点clear消除变量，在选择密码进行add 在payload里添加字典 开始攻击 攻击成功找到密码 Mid： 对比low和mid的源码发现mid中多了mysql_real_escape_string() 函数，而该函数是转义字符不影响暴力破解 采取步骤与low一样，最后结果大同小异 YQS0Ds.png High： 查看源码发现在mid的基础上增添了一个新的函数stripslashes和sleep（3）延时3秒，stripslashes()函数用于清理字符串中的反斜杠（\\），依旧不影响暴力破解。 YQS4bR.png 破解成功 2) SQL Injection 注入前应该知道的基本信息： | SCHEMATA ――&gt;存储数据库名的， |——&gt;关键字段：SCHEMA_NAME，表示数据库名称 TABLES ――&gt;存储表名的 TABLE_SCHEMA表示表所属的数据库名称； TABLE_NAME表示表的名称 COLUMNS ――&gt;存储字段名的 TABLE_NAME表示所属的表的名称 COLUMN_NAME表示字段名 Low： 查看源码，发现没有加过滤函数 发现存在字符型注入 判断有几个字段 1’ or 1=1 order by 2 # 获取数据库名称 查询表名 查询字段名 获取数据 Mid： 查看源码 发现仅仅是加了一个mysql_real_escape_string() 函数，这仅仅对 \\x00 \\n \\r \\ ‘ “ \\x1a 等字符有影响，我们可以用char码绕过，例如Char(“61”) 为=，或者转化为16，8进制， 其余步骤与low大同小异 只需将过滤的字符编码即可通过。 存在数字型注入 判断数据库名 判断表名 直接输入表名不行，可以转化为16进制绕过 获取数据 1 or 1=1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users # High： 查看源码 仅仅是多了一个limit，但可以注释掉所以和上述过长一样，就不再赘述 1&#39; or 1=1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users # 查询成功： 3) SQL Injection(Blind) 通过sqlmap来进行盲注 首先f12查看cookies 然后kali使用sqlmap注入 查看所有数据库 YQpxlF.png 用current-db查看当前数据库 查看有几个数据项 YQ9CwR.png 获取数据 YQ9tXQ.png Mid 用burpsuite抓包 YQ9a0s.png 使用1’ and 1=2 #或着1进行测试发现是数字型注入 [ YQ90kq.png](https://s1.ax1x.com/2020/05/09/YQ90kq.png) 注入发现是4位数据库 通过回复时间可以发现第一个字符为d 不断注入直至猜解表中的字段名时，猜解字段名的长度，对字段值users进行16进制转换为0x7573657273与sql injection操作类似 High： 有两点干扰： 对于LIMIT 1的限制输出记录数目，可以利用#注释其限制； 服务端可能会随机执行sleep()函数，做执行，则延迟的时间是随机在2-4s，所以可以判断dvwa给与回复的类型来判断是否得到结果或者等待10秒与mid类似。 剩余操作为盲注和普通注入的重复操作，在这里不再赘述 4) XSS reflected Low: 查看源代码 没有安全措施直接攻击 &lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt; Mid： 查看源代码 该代码中删除输入的 &lt;script&gt; ，只需输入两个 &lt;script&gt; ，或者大写其中字符 High： YQ9qnH.png 通过正则表达式过滤 &lt;script&gt; ，可以通过img、body等或者iframe等标签的src注入恶意的js代码 &lt;IMG src=1 onerror=alert(“AAA”)&gt; 5) XSS stored Low: 查看源代码 [ YQ9x4P.png](https://s1.ax1x.com/2020/05/09/YQ9x4P.png) 源代码对message，name输入框内容 没有进行XSS方面的过滤和检查，可以用burpsuite抓包 修改mtxmessage或者name值为 &lt;script&gt;alert(document.cookie)&lt;/script&gt; Mid: 使用 &lt;scr&lt;script&gt;ipt&gt;alert(document.cookie)&lt;/script&gt;或者&lt;sCript&gt;alert(document.cookie)&lt;/script&gt; 即可绕过过滤，过程与low相同 High： 修改为 &lt;IMG src=1 onerror=alert(document.cookie)&gt; 即可绕过过滤，过程与low相同","categories":[],"tags":[{"name":"sql，xss","slug":"sql，xss","permalink":"http://yoursite.com/tags/sql%EF%BC%8Cxss/"}]},{"title":"自建简单网页攻击","slug":"wangan","date":"2020-05-09T03:04:39.000Z","updated":"2020-05-09T04:22:38.198Z","comments":true,"path":"2020/05/09/wangan/","link":"","permalink":"http://yoursite.com/2020/05/09/wangan/","excerpt":"","text":"自建网页攻击\\4. 复现SQLi和XSS漏洞，获取数据库的表名，数据库名以及列名，数据内容等信息及漏洞修复 1) 下载wampserver并在其上的www目录下新建 login.php 和 test.php Login**：** &lt;html&gt; &lt;head&gt; &lt;title&gt;网络安全作业二&lt;/title&gt; &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt; &lt;/head&gt; &lt;body &gt; &lt;form action=&quot;test.php&quot; method=&quot;post&quot;&gt; &lt;fieldset &gt; &lt;legend&gt;自建sql注入平台&lt;/legend&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;用户名：&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;密 码：&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;password&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;reset&quot; value=&quot;重置&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/fieldset&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; Test： &lt;?php $pwd=$_POST[&#39;password&#39;]; $uname=$_POST[&#39;username&#39;]; //echo &quot;您当前执行的sql语句为：&quot; ; //echo &quot;select * from admin where password=&#39;$pwd&#39; and name=&#39;$uname&#39;&lt;br/&gt;&quot;; //echo &quot;&lt;hr&gt;&quot;; $mysqli = new mysqli(&#39;127.0.0.1&#39;,&#39;root&#39;,&#39;&#39;,&#39;sqlin&#39;); if(mysqli_connect_errno()){ printf(&quot;连接失败:%s&lt;br&gt;&quot;,mysqli_connect_error()); exit(); } $result = $mysqli-&gt;query(&quot;select * from admin where name=&#39;$uname&#39;&quot;); //print_r($result-&gt;fetch_array(MYSQLI_ASSOC)); if($row=mysqli_fetch_row($result)) { printf (&quot;%s : %s&quot;,$row[0],$row[1]); echo &quot;&lt;br&gt;&quot;; echo &quot;success！&quot;; } else { echo &quot;账号或密码错误！&quot;; } $mysqli-&gt;close(); $result-&gt;close();?&gt; 2) 创建数据库sqlin并写入数据 3) Sql**注入** 通过输入用户名 1&#39; order by 3#或1&#39; order by 2# 判断sql有几列 1&#39; union select 1,database() # 获取数据库名 1&#39; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() # 获取数据表名 0&#39; union select (select column_name from information_schema.columns where table_name=&#39;admin&#39; limit 0,1),(select column_name from information_schema.columns where table_name=&#39;admin&#39; limit 1,2)# 获取列名 YMxXWD.png 1&#39; union select * from admin# 获取数据 4) 修复 在test.php中可以加入对于“#”或者“=”的过滤，并对长度进行限制 例如 if(strlen($pwd)&gt;10) echo &quot;账号或密码错误！&quot;; 5) XSS**漏洞利用** www目录下新建xss.php xss**：** &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; &lt;title&gt;XSS&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=&quot;&quot; method=&quot;get&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;input&quot;&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; &lt;br&gt; &lt;?php $XssReflex = $_GET[&#39;input&#39;]; echo &#39;output:&lt;br&gt;&#39;.$XssReflex; ?&gt; &lt;/body&gt; &lt;/html&gt; 6) XSS**漏洞攻击** 如果输入2则输出2，但是如果输入可执行代码 &lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt; 此时查看源代码则发现我们输入的内容，弹窗弹出说明我们的代码是可执行的。 7) XSS**漏洞防范** 我们可以用htmlentities() 函数把字符转换为 HTML 实体 例：将 echo &#39;output:&lt;br&gt;&#39;.$XssReflex; 替换成 echo &#39;output:&lt;br&gt;&#39;.htmlentities($XssReflex); 再去输入上一步的代码。 发现没有弹窗，说明漏洞被修复，类似的还有htmlspecialchars函数HTMLPurifier.auto.php插件，RemoveXss函数等可以防范反射型xss漏洞的利用。","categories":[],"tags":[{"name":"xss，sql","slug":"xss，sql","permalink":"http://yoursite.com/tags/xss%EF%BC%8Csql/"}]},{"title":"php学习笔记","slug":"php学习笔记","date":"2020-04-14T07:15:33.000Z","updated":"2020-04-20T03:08:14.694Z","comments":true,"path":"2020/04/14/php学习笔记/","link":"","permalink":"http://yoursite.com/2020/04/14/php%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"sqllab","slug":"sqllib","date":"2020-04-14T07:09:58.000Z","updated":"2020-04-25T13:02:02.610Z","comments":true,"path":"2020/04/14/sqllib/","link":"","permalink":"http://yoursite.com/2020/04/14/sqllib/","excerpt":"","text":"less-1先输入?id=1判断是否存在注入漏洞 JygZrt.png 在输入?id=1’发现构造出了’1’’的错误语句 JygJrq.png 输入1’or 1=1—+发现回显正常，由于空格会被自动去掉，所以用+代替空格 JygYq0.png order by 3成功，order by 4 失败，判断有3列数据 Jygys1.png JygBRJ.png 输入-1’union select 1,2,3—+,当查询不存在的id时，数据库会将后面的查询语句的内容回显，并且可以判断2，3为显示位 输入database()获取数据库名，输入version（）获取版本号 Jyg2dK.png JygRIO.png 通过group_concat将多个数据查询结果转为字符串输出，通过查询information获取库名，并查询security库中的表名 JygfiD.png JyghJe.png 查询users表中的列 Jyg4RH.png 获取用户名及密码 JygoQA.png less-2输入1发现正常返回，1’错误返回，’’LIMIT 0,1’说明为数字型注入 Jyg5zd.png JygTsI.png 只需将less-1中的’去掉就可以通过 Jyg7Lt.png less-3输入1’发现回显’1’’)多了一个)，猜测将查询为id=（’$id’） JygbeP.png 将-1’后加个）即可通过 Jygqdf.png less-4输入1’正常返回。输入1”错误 JygLo8.png JygXFS.png 猜测将id进行了（””)包装，构住1”)即可通过 JygjJg.png","categories":[{"name":"sql注入","slug":"sql注入","permalink":"http://yoursite.com/categories/sql%E6%B3%A8%E5%85%A5/"}],"tags":[{"name":"sql","slug":"sql","permalink":"http://yoursite.com/tags/sql/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-04-13T14:34:12.659Z","updated":"2020-04-13T14:34:12.659Z","comments":true,"path":"2020/04/13/hello-world/","link":"","permalink":"http://yoursite.com/2020/04/13/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"逆向","slug":"逆向","permalink":"http://yoursite.com/categories/%E9%80%86%E5%90%91/"},{"name":"sql注入","slug":"sql注入","permalink":"http://yoursite.com/categories/sql%E6%B3%A8%E5%85%A5/"}],"tags":[{"name":"逆向","slug":"逆向","permalink":"http://yoursite.com/tags/%E9%80%86%E5%90%91/"},{"name":"sql，xss","slug":"sql，xss","permalink":"http://yoursite.com/tags/sql%EF%BC%8Cxss/"},{"name":"xss，sql","slug":"xss，sql","permalink":"http://yoursite.com/tags/xss%EF%BC%8Csql/"},{"name":"sql","slug":"sql","permalink":"http://yoursite.com/tags/sql/"}]}